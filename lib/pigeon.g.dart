// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ErrorCode {
  invalidUrl,
  join,
}

class VoidResult {
  VoidResult({
    this.error,
  });

  PlatformError? error;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['error'] = error?.encode();
    return pigeonMap;
  }

  static VoidResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return VoidResult(
      error: pigeonMap['error'] != null
          ? PlatformError.decode(pigeonMap['error']!)
          : null,
    );
  }
}

class PlatformError {
  PlatformError({
    required this.message,
    required this.code,
  });

  String message;
  ErrorCode code;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['message'] = message;
    pigeonMap['code'] = code.index;
    return pigeonMap;
  }

  static PlatformError decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PlatformError(
      message: pigeonMap['message']! as String,
      code: ErrorCode.values[pigeonMap['code']! as int]
,
    );
  }
}

class JoinArgs {
  JoinArgs({
    required this.url,
    required this.token,
    required this.enableMicrophone,
    required this.enableCamera,
  });

  String url;
  String token;
  bool enableMicrophone;
  bool enableCamera;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['url'] = url;
    pigeonMap['token'] = token;
    pigeonMap['enableMicrophone'] = enableMicrophone;
    pigeonMap['enableCamera'] = enableCamera;
    return pigeonMap;
  }

  static JoinArgs decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return JoinArgs(
      url: pigeonMap['url']! as String,
      token: pigeonMap['token']! as String,
      enableMicrophone: pigeonMap['enableMicrophone']! as bool,
      enableCamera: pigeonMap['enableCamera']! as bool,
    );
  }
}

class _DailyClientMessengerCodec extends StandardMessageCodec{
  const _DailyClientMessengerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is JoinArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is PlatformError) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is VoidResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return JoinArgs.decode(readValue(buffer)!);
      
      case 129:       
        return PlatformError.decode(readValue(buffer)!);
      
      case 130:       
        return VoidResult.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

/// This is the base class used for generating the pigeon code
class DailyClientMessenger {
  /// Constructor for [DailyClientMessenger].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  DailyClientMessenger({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _DailyClientMessengerCodec();

  Future<VoidResult> join(JoinArgs arg_args) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DailyClientMessenger.join', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_args]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as VoidResult?)!;
    }
  }

  Future<VoidResult> leave() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DailyClientMessenger.leave', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as VoidResult?)!;
    }
  }
}
