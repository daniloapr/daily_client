// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface VoidResult ()
+ (VoidResult *)fromMap:(NSDictionary *)dict;
+ (nullable VoidResult *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PlatformError ()
+ (PlatformError *)fromMap:(NSDictionary *)dict;
+ (nullable PlatformError *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface JoinArgs ()
+ (JoinArgs *)fromMap:(NSDictionary *)dict;
+ (nullable JoinArgs *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation VoidResult
+ (instancetype)makeWithError:(nullable PlatformError *)error {
  VoidResult* pigeonResult = [[VoidResult alloc] init];
  pigeonResult.error = error;
  return pigeonResult;
}
+ (VoidResult *)fromMap:(NSDictionary *)dict {
  VoidResult *pigeonResult = [[VoidResult alloc] init];
  pigeonResult.error = [PlatformError nullableFromMap:GetNullableObject(dict, @"error")];
  return pigeonResult;
}
+ (nullable VoidResult *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [VoidResult fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"error" : (self.error ? [self.error toMap] : [NSNull null]),
  };
}
@end

@implementation PlatformError
+ (instancetype)makeWithMessage:(NSString *)message
    code:(NSNumber *)code {
  PlatformError* pigeonResult = [[PlatformError alloc] init];
  pigeonResult.message = message;
  pigeonResult.code = code;
  return pigeonResult;
}
+ (PlatformError *)fromMap:(NSDictionary *)dict {
  PlatformError *pigeonResult = [[PlatformError alloc] init];
  pigeonResult.message = GetNullableObject(dict, @"message");
  NSAssert(pigeonResult.message != nil, @"");
  pigeonResult.code = GetNullableObject(dict, @"code");
  NSAssert(pigeonResult.code != nil, @"");
  return pigeonResult;
}
+ (nullable PlatformError *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [PlatformError fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"message" : (self.message ?: [NSNull null]),
    @"code" : (self.code ?: [NSNull null]),
  };
}
@end

@implementation JoinArgs
+ (instancetype)makeWithUrl:(NSString *)url
    token:(NSString *)token
    isMicEnabled:(NSNumber *)isMicEnabled
    isCameraEnabled:(NSNumber *)isCameraEnabled {
  JoinArgs* pigeonResult = [[JoinArgs alloc] init];
  pigeonResult.url = url;
  pigeonResult.token = token;
  pigeonResult.isMicEnabled = isMicEnabled;
  pigeonResult.isCameraEnabled = isCameraEnabled;
  return pigeonResult;
}
+ (JoinArgs *)fromMap:(NSDictionary *)dict {
  JoinArgs *pigeonResult = [[JoinArgs alloc] init];
  pigeonResult.url = GetNullableObject(dict, @"url");
  NSAssert(pigeonResult.url != nil, @"");
  pigeonResult.token = GetNullableObject(dict, @"token");
  NSAssert(pigeonResult.token != nil, @"");
  pigeonResult.isMicEnabled = GetNullableObject(dict, @"isMicEnabled");
  NSAssert(pigeonResult.isMicEnabled != nil, @"");
  pigeonResult.isCameraEnabled = GetNullableObject(dict, @"isCameraEnabled");
  NSAssert(pigeonResult.isCameraEnabled != nil, @"");
  return pigeonResult;
}
+ (nullable JoinArgs *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [JoinArgs fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"url" : (self.url ?: [NSNull null]),
    @"token" : (self.token ?: [NSNull null]),
    @"isMicEnabled" : (self.isMicEnabled ?: [NSNull null]),
    @"isCameraEnabled" : (self.isCameraEnabled ?: [NSNull null]),
  };
}
@end

@interface DailyClientMessengerCodecReader : FlutterStandardReader
@end
@implementation DailyClientMessengerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [JoinArgs fromMap:[self readValue]];
    
    case 129:     
      return [PlatformError fromMap:[self readValue]];
    
    case 130:     
      return [VoidResult fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface DailyClientMessengerCodecWriter : FlutterStandardWriter
@end
@implementation DailyClientMessengerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[JoinArgs class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PlatformError class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VoidResult class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface DailyClientMessengerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DailyClientMessengerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DailyClientMessengerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DailyClientMessengerCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *DailyClientMessengerGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DailyClientMessengerCodecReaderWriter *readerWriter = [[DailyClientMessengerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void DailyClientMessengerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DailyClientMessenger> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyClientMessenger.join"
        binaryMessenger:binaryMessenger
        codec:DailyClientMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(joinArgs:completion:)], @"DailyClientMessenger api (%@) doesn't respond to @selector(joinArgs:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        JoinArgs *arg_args = GetNullableObjectAtIndex(args, 0);
        [api joinArgs:arg_args completion:^(VoidResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyClientMessenger.leave"
        binaryMessenger:binaryMessenger
        codec:DailyClientMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(leaveWithError:)], @"DailyClientMessenger api (%@) doesn't respond to @selector(leaveWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VoidResult *output = [api leaveWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
