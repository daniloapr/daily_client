// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface UpdateSubscriptionArgs ()
+ (UpdateSubscriptionArgs *)fromMap:(NSDictionary *)dict;
+ (nullable UpdateSubscriptionArgs *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VoidResult ()
+ (VoidResult *)fromMap:(NSDictionary *)dict;
+ (nullable VoidResult *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PlatformError ()
+ (PlatformError *)fromMap:(NSDictionary *)dict;
+ (nullable PlatformError *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface JoinArgs ()
+ (JoinArgs *)fromMap:(NSDictionary *)dict;
+ (nullable JoinArgs *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface UpdateSubscriptionProfileArgs ()
+ (UpdateSubscriptionProfileArgs *)fromMap:(NSDictionary *)dict;
+ (nullable UpdateSubscriptionProfileArgs *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface JoinMessage ()
+ (JoinMessage *)fromMap:(NSDictionary *)dict;
+ (nullable JoinMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LocalParticipantMessage ()
+ (LocalParticipantMessage *)fromMap:(NSDictionary *)dict;
+ (nullable LocalParticipantMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface RemoteParticipantMessage ()
+ (RemoteParticipantMessage *)fromMap:(NSDictionary *)dict;
+ (nullable RemoteParticipantMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ParticipantsMessage ()
+ (ParticipantsMessage *)fromMap:(NSDictionary *)dict;
+ (nullable ParticipantsMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface MediaMessage ()
+ (MediaMessage *)fromMap:(NSDictionary *)dict;
+ (nullable MediaMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface MediaInfoMessage ()
+ (MediaInfoMessage *)fromMap:(NSDictionary *)dict;
+ (nullable MediaInfoMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TrackMessage ()
+ (TrackMessage *)fromMap:(NSDictionary *)dict;
+ (nullable TrackMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation UpdateSubscriptionArgs
+ (instancetype)makeWithParticipantId:(NSString *)participantId
    profileName:(NSString *)profileName {
  UpdateSubscriptionArgs* pigeonResult = [[UpdateSubscriptionArgs alloc] init];
  pigeonResult.participantId = participantId;
  pigeonResult.profileName = profileName;
  return pigeonResult;
}
+ (UpdateSubscriptionArgs *)fromMap:(NSDictionary *)dict {
  UpdateSubscriptionArgs *pigeonResult = [[UpdateSubscriptionArgs alloc] init];
  pigeonResult.participantId = GetNullableObject(dict, @"participantId");
  NSAssert(pigeonResult.participantId != nil, @"");
  pigeonResult.profileName = GetNullableObject(dict, @"profileName");
  NSAssert(pigeonResult.profileName != nil, @"");
  return pigeonResult;
}
+ (nullable UpdateSubscriptionArgs *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [UpdateSubscriptionArgs fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"participantId" : (self.participantId ?: [NSNull null]),
    @"profileName" : (self.profileName ?: [NSNull null]),
  };
}
@end

@implementation VoidResult
+ (instancetype)makeWithError:(nullable PlatformError *)error {
  VoidResult* pigeonResult = [[VoidResult alloc] init];
  pigeonResult.error = error;
  return pigeonResult;
}
+ (VoidResult *)fromMap:(NSDictionary *)dict {
  VoidResult *pigeonResult = [[VoidResult alloc] init];
  pigeonResult.error = [PlatformError nullableFromMap:GetNullableObject(dict, @"error")];
  return pigeonResult;
}
+ (nullable VoidResult *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [VoidResult fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"error" : (self.error ? [self.error toMap] : [NSNull null]),
  };
}
@end

@implementation PlatformError
+ (instancetype)makeWithMessage:(NSString *)message
    code:(Code)code {
  PlatformError* pigeonResult = [[PlatformError alloc] init];
  pigeonResult.message = message;
  pigeonResult.code = code;
  return pigeonResult;
}
+ (PlatformError *)fromMap:(NSDictionary *)dict {
  PlatformError *pigeonResult = [[PlatformError alloc] init];
  pigeonResult.message = GetNullableObject(dict, @"message");
  NSAssert(pigeonResult.message != nil, @"");
  pigeonResult.code = [GetNullableObject(dict, @"code") integerValue];
  return pigeonResult;
}
+ (nullable PlatformError *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [PlatformError fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"message" : (self.message ?: [NSNull null]),
    @"code" : @(self.code),
  };
}
@end

@implementation JoinArgs
+ (instancetype)makeWithUrl:(NSString *)url
    token:(NSString *)token
    enableMicrophone:(NSNumber *)enableMicrophone
    enableCamera:(NSNumber *)enableCamera {
  JoinArgs* pigeonResult = [[JoinArgs alloc] init];
  pigeonResult.url = url;
  pigeonResult.token = token;
  pigeonResult.enableMicrophone = enableMicrophone;
  pigeonResult.enableCamera = enableCamera;
  return pigeonResult;
}
+ (JoinArgs *)fromMap:(NSDictionary *)dict {
  JoinArgs *pigeonResult = [[JoinArgs alloc] init];
  pigeonResult.url = GetNullableObject(dict, @"url");
  NSAssert(pigeonResult.url != nil, @"");
  pigeonResult.token = GetNullableObject(dict, @"token");
  NSAssert(pigeonResult.token != nil, @"");
  pigeonResult.enableMicrophone = GetNullableObject(dict, @"enableMicrophone");
  NSAssert(pigeonResult.enableMicrophone != nil, @"");
  pigeonResult.enableCamera = GetNullableObject(dict, @"enableCamera");
  NSAssert(pigeonResult.enableCamera != nil, @"");
  return pigeonResult;
}
+ (nullable JoinArgs *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [JoinArgs fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"url" : (self.url ?: [NSNull null]),
    @"token" : (self.token ?: [NSNull null]),
    @"enableMicrophone" : (self.enableMicrophone ?: [NSNull null]),
    @"enableCamera" : (self.enableCamera ?: [NSNull null]),
  };
}
@end

@implementation UpdateSubscriptionProfileArgs
+ (instancetype)makeWithName:(NSString *)name
    subscribeCamera:(NSNumber *)subscribeCamera
    subscribeMicrophone:(NSNumber *)subscribeMicrophone {
  UpdateSubscriptionProfileArgs* pigeonResult = [[UpdateSubscriptionProfileArgs alloc] init];
  pigeonResult.name = name;
  pigeonResult.subscribeCamera = subscribeCamera;
  pigeonResult.subscribeMicrophone = subscribeMicrophone;
  return pigeonResult;
}
+ (UpdateSubscriptionProfileArgs *)fromMap:(NSDictionary *)dict {
  UpdateSubscriptionProfileArgs *pigeonResult = [[UpdateSubscriptionProfileArgs alloc] init];
  pigeonResult.name = GetNullableObject(dict, @"name");
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.subscribeCamera = GetNullableObject(dict, @"subscribeCamera");
  NSAssert(pigeonResult.subscribeCamera != nil, @"");
  pigeonResult.subscribeMicrophone = GetNullableObject(dict, @"subscribeMicrophone");
  NSAssert(pigeonResult.subscribeMicrophone != nil, @"");
  return pigeonResult;
}
+ (nullable UpdateSubscriptionProfileArgs *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [UpdateSubscriptionProfileArgs fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"name" : (self.name ?: [NSNull null]),
    @"subscribeCamera" : (self.subscribeCamera ?: [NSNull null]),
    @"subscribeMicrophone" : (self.subscribeMicrophone ?: [NSNull null]),
  };
}
@end

@implementation JoinMessage
+ (instancetype)makeWithLocalParticipant:(nullable LocalParticipantMessage *)localParticipant
    remoteParticipants:(nullable NSArray<RemoteParticipantMessage *> *)remoteParticipants
    error:(nullable PlatformError *)error {
  JoinMessage* pigeonResult = [[JoinMessage alloc] init];
  pigeonResult.localParticipant = localParticipant;
  pigeonResult.remoteParticipants = remoteParticipants;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (JoinMessage *)fromMap:(NSDictionary *)dict {
  JoinMessage *pigeonResult = [[JoinMessage alloc] init];
  pigeonResult.localParticipant = [LocalParticipantMessage nullableFromMap:GetNullableObject(dict, @"localParticipant")];
  pigeonResult.remoteParticipants = GetNullableObject(dict, @"remoteParticipants");
  pigeonResult.error = [PlatformError nullableFromMap:GetNullableObject(dict, @"error")];
  return pigeonResult;
}
+ (nullable JoinMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [JoinMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"localParticipant" : (self.localParticipant ? [self.localParticipant toMap] : [NSNull null]),
    @"remoteParticipants" : (self.remoteParticipants ?: [NSNull null]),
    @"error" : (self.error ? [self.error toMap] : [NSNull null]),
  };
}
@end

@implementation LocalParticipantMessage
+ (instancetype)makeWithId:(NSString *)id
    userId:(NSString *)userId
    media:(nullable MediaMessage *)media {
  LocalParticipantMessage* pigeonResult = [[LocalParticipantMessage alloc] init];
  pigeonResult.id = id;
  pigeonResult.userId = userId;
  pigeonResult.media = media;
  return pigeonResult;
}
+ (LocalParticipantMessage *)fromMap:(NSDictionary *)dict {
  LocalParticipantMessage *pigeonResult = [[LocalParticipantMessage alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.userId = GetNullableObject(dict, @"userId");
  NSAssert(pigeonResult.userId != nil, @"");
  pigeonResult.media = [MediaMessage nullableFromMap:GetNullableObject(dict, @"media")];
  return pigeonResult;
}
+ (nullable LocalParticipantMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [LocalParticipantMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"userId" : (self.userId ?: [NSNull null]),
    @"media" : (self.media ? [self.media toMap] : [NSNull null]),
  };
}
@end

@implementation RemoteParticipantMessage
+ (instancetype)makeWithId:(NSString *)id
    userId:(NSString *)userId
    userName:(NSString *)userName
    media:(nullable MediaMessage *)media
    joinedAtIsoString:(NSString *)joinedAtIsoString {
  RemoteParticipantMessage* pigeonResult = [[RemoteParticipantMessage alloc] init];
  pigeonResult.id = id;
  pigeonResult.userId = userId;
  pigeonResult.userName = userName;
  pigeonResult.media = media;
  pigeonResult.joinedAtIsoString = joinedAtIsoString;
  return pigeonResult;
}
+ (RemoteParticipantMessage *)fromMap:(NSDictionary *)dict {
  RemoteParticipantMessage *pigeonResult = [[RemoteParticipantMessage alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.userId = GetNullableObject(dict, @"userId");
  NSAssert(pigeonResult.userId != nil, @"");
  pigeonResult.userName = GetNullableObject(dict, @"userName");
  NSAssert(pigeonResult.userName != nil, @"");
  pigeonResult.media = [MediaMessage nullableFromMap:GetNullableObject(dict, @"media")];
  pigeonResult.joinedAtIsoString = GetNullableObject(dict, @"joinedAtIsoString");
  NSAssert(pigeonResult.joinedAtIsoString != nil, @"");
  return pigeonResult;
}
+ (nullable RemoteParticipantMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [RemoteParticipantMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"userId" : (self.userId ?: [NSNull null]),
    @"userName" : (self.userName ?: [NSNull null]),
    @"media" : (self.media ? [self.media toMap] : [NSNull null]),
    @"joinedAtIsoString" : (self.joinedAtIsoString ?: [NSNull null]),
  };
}
@end

@implementation ParticipantsMessage
+ (instancetype)makeWithLocal:(LocalParticipantMessage *)local
    remote:(NSArray<RemoteParticipantMessage *> *)remote {
  ParticipantsMessage* pigeonResult = [[ParticipantsMessage alloc] init];
  pigeonResult.local = local;
  pigeonResult.remote = remote;
  return pigeonResult;
}
+ (ParticipantsMessage *)fromMap:(NSDictionary *)dict {
  ParticipantsMessage *pigeonResult = [[ParticipantsMessage alloc] init];
  pigeonResult.local = [LocalParticipantMessage nullableFromMap:GetNullableObject(dict, @"local")];
  NSAssert(pigeonResult.local != nil, @"");
  pigeonResult.remote = GetNullableObject(dict, @"remote");
  NSAssert(pigeonResult.remote != nil, @"");
  return pigeonResult;
}
+ (nullable ParticipantsMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ParticipantsMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"local" : (self.local ? [self.local toMap] : [NSNull null]),
    @"remote" : (self.remote ?: [NSNull null]),
  };
}
@end

@implementation MediaMessage
+ (instancetype)makeWithCamera:(MediaInfoMessage *)camera
    microphone:(MediaInfoMessage *)microphone
    screenVideo:(MediaInfoMessage *)screenVideo
    screenAudio:(MediaInfoMessage *)screenAudio {
  MediaMessage* pigeonResult = [[MediaMessage alloc] init];
  pigeonResult.camera = camera;
  pigeonResult.microphone = microphone;
  pigeonResult.screenVideo = screenVideo;
  pigeonResult.screenAudio = screenAudio;
  return pigeonResult;
}
+ (MediaMessage *)fromMap:(NSDictionary *)dict {
  MediaMessage *pigeonResult = [[MediaMessage alloc] init];
  pigeonResult.camera = [MediaInfoMessage nullableFromMap:GetNullableObject(dict, @"camera")];
  NSAssert(pigeonResult.camera != nil, @"");
  pigeonResult.microphone = [MediaInfoMessage nullableFromMap:GetNullableObject(dict, @"microphone")];
  NSAssert(pigeonResult.microphone != nil, @"");
  pigeonResult.screenVideo = [MediaInfoMessage nullableFromMap:GetNullableObject(dict, @"screenVideo")];
  NSAssert(pigeonResult.screenVideo != nil, @"");
  pigeonResult.screenAudio = [MediaInfoMessage nullableFromMap:GetNullableObject(dict, @"screenAudio")];
  NSAssert(pigeonResult.screenAudio != nil, @"");
  return pigeonResult;
}
+ (nullable MediaMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [MediaMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"camera" : (self.camera ? [self.camera toMap] : [NSNull null]),
    @"microphone" : (self.microphone ? [self.microphone toMap] : [NSNull null]),
    @"screenVideo" : (self.screenVideo ? [self.screenVideo toMap] : [NSNull null]),
    @"screenAudio" : (self.screenAudio ? [self.screenAudio toMap] : [NSNull null]),
  };
}
@end

@implementation MediaInfoMessage
+ (instancetype)makeWithState:(MediaStateMessage)state
    subscribed:(TrackSubscriptionStateMessage)subscribed
    track:(nullable TrackMessage *)track {
  MediaInfoMessage* pigeonResult = [[MediaInfoMessage alloc] init];
  pigeonResult.state = state;
  pigeonResult.subscribed = subscribed;
  pigeonResult.track = track;
  return pigeonResult;
}
+ (MediaInfoMessage *)fromMap:(NSDictionary *)dict {
  MediaInfoMessage *pigeonResult = [[MediaInfoMessage alloc] init];
  pigeonResult.state = [GetNullableObject(dict, @"state") integerValue];
  pigeonResult.subscribed = [GetNullableObject(dict, @"subscribed") integerValue];
  pigeonResult.track = [TrackMessage nullableFromMap:GetNullableObject(dict, @"track")];
  return pigeonResult;
}
+ (nullable MediaInfoMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [MediaInfoMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"state" : @(self.state),
    @"subscribed" : @(self.subscribed),
    @"track" : (self.track ? [self.track toMap] : [NSNull null]),
  };
}
@end

@implementation TrackMessage
+ (instancetype)makeWithId:(NSString *)id
    isEnabled:(NSNumber *)isEnabled {
  TrackMessage* pigeonResult = [[TrackMessage alloc] init];
  pigeonResult.id = id;
  pigeonResult.isEnabled = isEnabled;
  return pigeonResult;
}
+ (TrackMessage *)fromMap:(NSDictionary *)dict {
  TrackMessage *pigeonResult = [[TrackMessage alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.isEnabled = GetNullableObject(dict, @"isEnabled");
  NSAssert(pigeonResult.isEnabled != nil, @"");
  return pigeonResult;
}
+ (nullable TrackMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [TrackMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"isEnabled" : (self.isEnabled ?: [NSNull null]),
  };
}
@end

@interface DailyMessengerCodecReader : FlutterStandardReader
@end
@implementation DailyMessengerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [JoinArgs fromMap:[self readValue]];
    
    case 129:     
      return [JoinMessage fromMap:[self readValue]];
    
    case 130:     
      return [LocalParticipantMessage fromMap:[self readValue]];
    
    case 131:     
      return [LocalParticipantMessage fromMap:[self readValue]];
    
    case 132:     
      return [MediaInfoMessage fromMap:[self readValue]];
    
    case 133:     
      return [MediaMessage fromMap:[self readValue]];
    
    case 134:     
      return [ParticipantsMessage fromMap:[self readValue]];
    
    case 135:     
      return [PlatformError fromMap:[self readValue]];
    
    case 136:     
      return [RemoteParticipantMessage fromMap:[self readValue]];
    
    case 137:     
      return [TrackMessage fromMap:[self readValue]];
    
    case 138:     
      return [UpdateSubscriptionArgs fromMap:[self readValue]];
    
    case 139:     
      return [UpdateSubscriptionProfileArgs fromMap:[self readValue]];
    
    case 140:     
      return [VoidResult fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface DailyMessengerCodecWriter : FlutterStandardWriter
@end
@implementation DailyMessengerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[JoinArgs class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[JoinMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LocalParticipantMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LocalParticipantMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaInfoMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ParticipantsMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PlatformError class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[RemoteParticipantMessage class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TrackMessage class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[UpdateSubscriptionArgs class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[UpdateSubscriptionProfileArgs class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VoidResult class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface DailyMessengerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DailyMessengerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DailyMessengerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DailyMessengerCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *DailyMessengerGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DailyMessengerCodecReaderWriter *readerWriter = [[DailyMessengerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void DailyMessengerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DailyMessenger> *api) {
    /// Join Daily call.
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.join"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(joinArgs:completion:)], @"DailyMessenger api (%@) doesn't respond to @selector(joinArgs:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        JoinArgs *arg_args = GetNullableObjectAtIndex(args, 0);
        [api joinArgs:arg_args completion:^(JoinMessage *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
    /// Leave Daily call.
{
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.leave"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(leaveWithError:)], @"DailyMessenger api (%@) doesn't respond to @selector(leaveWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VoidResult *output = [api leaveWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.setMicrophoneEnabled"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMicrophoneEnabledEnableMic:error:)], @"DailyMessenger api (%@) doesn't respond to @selector(setMicrophoneEnabledEnableMic:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enableMic = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VoidResult *output = [api setMicrophoneEnabledEnableMic:arg_enableMic error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.setCameraEnabled"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCameraEnabledEnableCam:error:)], @"DailyMessenger api (%@) doesn't respond to @selector(setCameraEnabledEnableCam:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enableCam = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VoidResult *output = [api setCameraEnabledEnableCam:arg_enableCam error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.updateSubscriptionProfiles"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSubscriptionProfilesArgs:error:)], @"DailyMessenger api (%@) doesn't respond to @selector(updateSubscriptionProfilesArgs:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<UpdateSubscriptionProfileArgs *> *arg_args = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VoidResult *output = [api updateSubscriptionProfilesArgs:arg_args error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.updateSubscriptions"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSubscriptionsArgs:error:)], @"DailyMessenger api (%@) doesn't respond to @selector(updateSubscriptionsArgs:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<UpdateSubscriptionArgs *> *arg_args = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VoidResult *output = [api updateSubscriptionsArgs:arg_args error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.DailyMessenger.getParticipants"
        binaryMessenger:binaryMessenger
        codec:DailyMessengerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantsWithError:)], @"DailyMessenger api (%@) doesn't respond to @selector(getParticipantsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        ParticipantsMessage *output = [api getParticipantsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface DailyCallbackCodecReader : FlutterStandardReader
@end
@implementation DailyCallbackCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [LocalParticipantMessage fromMap:[self readValue]];
    
    case 129:     
      return [MediaInfoMessage fromMap:[self readValue]];
    
    case 130:     
      return [MediaMessage fromMap:[self readValue]];
    
    case 131:     
      return [RemoteParticipantMessage fromMap:[self readValue]];
    
    case 132:     
      return [RemoteParticipantMessage fromMap:[self readValue]];
    
    case 133:     
      return [TrackMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface DailyCallbackCodecWriter : FlutterStandardWriter
@end
@implementation DailyCallbackCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[LocalParticipantMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaInfoMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MediaMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[RemoteParticipantMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[RemoteParticipantMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TrackMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface DailyCallbackCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DailyCallbackCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DailyCallbackCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DailyCallbackCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *DailyCallbackGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DailyCallbackCodecReaderWriter *readerWriter = [[DailyCallbackCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface DailyCallback ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation DailyCallback

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onParticipantsUpdatedLocalParticipantMessage:(LocalParticipantMessage *)arg_localParticipantMessage remoteParticipantsMessage:(NSArray<RemoteParticipantMessage *> *)arg_remoteParticipantsMessage completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DailyCallback.onParticipantsUpdated"
      binaryMessenger:self.binaryMessenger
      codec:DailyCallbackGetCodec()      ];  [channel sendMessage:@[arg_localParticipantMessage ?: [NSNull null], arg_remoteParticipantsMessage ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onParticipantUpdatedRemoteParticipantMessage:(RemoteParticipantMessage *)arg_remoteParticipantMessage completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DailyCallback.onParticipantUpdated"
      binaryMessenger:self.binaryMessenger
      codec:DailyCallbackGetCodec()      ];  [channel sendMessage:@[arg_remoteParticipantMessage ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onLocalParticipantUpdatedLocalParticipantMessage:(LocalParticipantMessage *)arg_localParticipantMessage completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DailyCallback.onLocalParticipantUpdated"
      binaryMessenger:self.binaryMessenger
      codec:DailyCallbackGetCodec()      ];  [channel sendMessage:@[arg_localParticipantMessage ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onParticipantJoinedRemoteParticipantMessage:(RemoteParticipantMessage *)arg_remoteParticipantMessage completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DailyCallback.onParticipantJoined"
      binaryMessenger:self.binaryMessenger
      codec:DailyCallbackGetCodec()      ];  [channel sendMessage:@[arg_remoteParticipantMessage ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onParticipantLeftRemoteParticipantMessage:(RemoteParticipantMessage *)arg_remoteParticipantMessage completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DailyCallback.onParticipantLeft"
      binaryMessenger:self.binaryMessenger
      codec:DailyCallbackGetCodec()      ];  [channel sendMessage:@[arg_remoteParticipantMessage ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onCallStateUpdatedStateCode:(NSNumber *)arg_stateCode completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DailyCallback.onCallStateUpdated"
      binaryMessenger:self.binaryMessenger
      codec:DailyCallbackGetCodec()      ];  [channel sendMessage:@[arg_stateCode ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
