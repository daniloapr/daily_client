// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

///Generated class from Pigeon that represents data sent in messages.
struct VoidResult {
  var error: PlatformError? = nil

  static func fromMap(_ map: [String: Any?]) -> VoidResult? {
    var error: PlatformError? = nil
    if let errorMap = map["error"] as? [String: Any?] {
      error = PlatformError.fromMap(errorMap)
    }

    return VoidResult(
      error: error
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "error": error?.toMap()
    ]
  }
}

///Generated class from Pigeon that represents data sent in messages.
struct PlatformError {
  var message: String
  var code: Int32

  static func fromMap(_ map: [String: Any?]) -> PlatformError? {
    let message = map["message"] as! String
    let code = map["code"] as! Int32

    return PlatformError(
      message: message,
      code: code
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "message": message,
      "code": code
    ]
  }
}

///Generated class from Pigeon that represents data sent in messages.
struct JoinArgs {
  var url: String
  var token: String
  var isMicEnabled: Bool
  var isCameraEnabled: Bool

  static func fromMap(_ map: [String: Any?]) -> JoinArgs? {
    let url = map["url"] as! String
    let token = map["token"] as! String
    let isMicEnabled = map["isMicEnabled"] as! Bool
    let isCameraEnabled = map["isCameraEnabled"] as! Bool

    return JoinArgs(
      url: url,
      token: token,
      isMicEnabled: isMicEnabled,
      isCameraEnabled: isCameraEnabled
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "url": url,
      "token": token,
      "isMicEnabled": isMicEnabled,
      "isCameraEnabled": isCameraEnabled
    ]
  }
}

private class DailyClientMessengerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return JoinArgs.fromMap(self.readValue() as! [String: Any])      
      case 129:
        return PlatformError.fromMap(self.readValue() as! [String: Any])      
      case 130:
        return VoidResult.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class DailyClientMessengerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? JoinArgs {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else if let value = value as? PlatformError {
      super.writeByte(129)
      super.writeValue(value.toMap())
    } else if let value = value as? VoidResult {
      super.writeByte(130)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class DailyClientMessengerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DailyClientMessengerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DailyClientMessengerCodecWriter(data: data)
  }
}

class DailyClientMessengerCodec: FlutterStandardMessageCodec {
  static let shared = DailyClientMessengerCodec(readerWriter: DailyClientMessengerCodecReaderWriter())
}

///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DailyClientMessenger {
  func join(args: JoinArgs, completion: @escaping (VoidResult) -> Void)
  func leave() -> VoidResult
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DailyClientMessengerSetup {
  /// The codec used by DailyClientMessenger.
  static var codec: FlutterStandardMessageCodec { DailyClientMessengerCodec.shared }
  /// Sets up an instance of `DailyClientMessenger` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DailyClientMessenger?) {
    let joinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.DailyClientMessenger.join", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      joinChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argsArg = args[0] as! JoinArgs
        api.join(args: argsArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      joinChannel.setMessageHandler(nil)
    }
    let leaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.DailyClientMessenger.leave", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      leaveChannel.setMessageHandler { _, reply in
        let result = api.leave()
        reply(wrapResult(result))
      }
    } else {
      leaveChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
