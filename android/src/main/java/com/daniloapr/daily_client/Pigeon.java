// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.daniloapr.daily_client;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum Code {
    INVALID_URL(0),
    JOIN(1),
    UPDATE_CAMERA(2),
    UPDATE_MICROPHONE(3),
    UPDATE_SUBSCRIPTIONS(4),
    UPDATE_SUBSCRIPTION_PROFILES(5);

    private int index;
    private Code(final int index) {
      this.index = index;
    }
  }

  public enum TrackSubscriptionStateMessage {
    SUBSCRIBED(0),
    STAGED(1),
    UNSUBSCRIBED(2),
    UNKNOWN(3);

    private int index;
    private TrackSubscriptionStateMessage(final int index) {
      this.index = index;
    }
  }

  public enum MediaStateMessage {
    BLOCKED(0),
    OFF(1),
    RECEIVABLE(2),
    LOADING(3),
    PLAYABLE(4),
    INTERRUPTED(5),
    UNKNOWN(6);

    private int index;
    private MediaStateMessage(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UpdateSubscriptionArgs {
    private @NonNull String participantId;
    public @NonNull String getParticipantId() { return participantId; }
    public void setParticipantId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"participantId\" is null.");
      }
      this.participantId = setterArg;
    }

    private @NonNull String profileName;
    public @NonNull String getProfileName() { return profileName; }
    public void setProfileName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"profileName\" is null.");
      }
      this.profileName = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private UpdateSubscriptionArgs() {}
    public static final class Builder {
      private @Nullable String participantId;
      public @NonNull Builder setParticipantId(@NonNull String setterArg) {
        this.participantId = setterArg;
        return this;
      }
      private @Nullable String profileName;
      public @NonNull Builder setProfileName(@NonNull String setterArg) {
        this.profileName = setterArg;
        return this;
      }
      public @NonNull UpdateSubscriptionArgs build() {
        UpdateSubscriptionArgs pigeonReturn = new UpdateSubscriptionArgs();
        pigeonReturn.setParticipantId(participantId);
        pigeonReturn.setProfileName(profileName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("participantId", participantId);
      toMapResult.put("profileName", profileName);
      return toMapResult;
    }
    static @NonNull UpdateSubscriptionArgs fromMap(@NonNull Map<String, Object> map) {
      UpdateSubscriptionArgs pigeonResult = new UpdateSubscriptionArgs();
      Object participantId = map.get("participantId");
      pigeonResult.setParticipantId((String)participantId);
      Object profileName = map.get("profileName");
      pigeonResult.setProfileName((String)profileName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VoidResult {
    private @Nullable PlatformError error;
    public @Nullable PlatformError getError() { return error; }
    public void setError(@Nullable PlatformError setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {
      private @Nullable PlatformError error;
      public @NonNull Builder setError(@Nullable PlatformError setterArg) {
        this.error = setterArg;
        return this;
      }
      public @NonNull VoidResult build() {
        VoidResult pigeonReturn = new VoidResult();
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("error", (error == null) ? null : error.toMap());
      return toMapResult;
    }
    static @NonNull VoidResult fromMap(@NonNull Map<String, Object> map) {
      VoidResult pigeonResult = new VoidResult();
      Object error = map.get("error");
      pigeonResult.setError((error == null) ? null : PlatformError.fromMap((Map)error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PlatformError {
    private @NonNull String message;
    public @NonNull String getMessage() { return message; }
    public void setMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    private @NonNull Code code;
    public @NonNull Code getCode() { return code; }
    public void setCode(@NonNull Code setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"code\" is null.");
      }
      this.code = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private PlatformError() {}
    public static final class Builder {
      private @Nullable String message;
      public @NonNull Builder setMessage(@NonNull String setterArg) {
        this.message = setterArg;
        return this;
      }
      private @Nullable Code code;
      public @NonNull Builder setCode(@NonNull Code setterArg) {
        this.code = setterArg;
        return this;
      }
      public @NonNull PlatformError build() {
        PlatformError pigeonReturn = new PlatformError();
        pigeonReturn.setMessage(message);
        pigeonReturn.setCode(code);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("message", message);
      toMapResult.put("code", code == null ? null : code.index);
      return toMapResult;
    }
    static @NonNull PlatformError fromMap(@NonNull Map<String, Object> map) {
      PlatformError pigeonResult = new PlatformError();
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      Object code = map.get("code");
      pigeonResult.setCode(code == null ? null : Code.values()[(int)code]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class JoinArgs {
    private @NonNull String url;
    public @NonNull String getUrl() { return url; }
    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    private @NonNull String token;
    public @NonNull String getToken() { return token; }
    public void setToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"token\" is null.");
      }
      this.token = setterArg;
    }

    private @NonNull Boolean enableMicrophone;
    public @NonNull Boolean getEnableMicrophone() { return enableMicrophone; }
    public void setEnableMicrophone(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableMicrophone\" is null.");
      }
      this.enableMicrophone = setterArg;
    }

    private @NonNull Boolean enableCamera;
    public @NonNull Boolean getEnableCamera() { return enableCamera; }
    public void setEnableCamera(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableCamera\" is null.");
      }
      this.enableCamera = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private JoinArgs() {}
    public static final class Builder {
      private @Nullable String url;
      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }
      private @Nullable String token;
      public @NonNull Builder setToken(@NonNull String setterArg) {
        this.token = setterArg;
        return this;
      }
      private @Nullable Boolean enableMicrophone;
      public @NonNull Builder setEnableMicrophone(@NonNull Boolean setterArg) {
        this.enableMicrophone = setterArg;
        return this;
      }
      private @Nullable Boolean enableCamera;
      public @NonNull Builder setEnableCamera(@NonNull Boolean setterArg) {
        this.enableCamera = setterArg;
        return this;
      }
      public @NonNull JoinArgs build() {
        JoinArgs pigeonReturn = new JoinArgs();
        pigeonReturn.setUrl(url);
        pigeonReturn.setToken(token);
        pigeonReturn.setEnableMicrophone(enableMicrophone);
        pigeonReturn.setEnableCamera(enableCamera);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("url", url);
      toMapResult.put("token", token);
      toMapResult.put("enableMicrophone", enableMicrophone);
      toMapResult.put("enableCamera", enableCamera);
      return toMapResult;
    }
    static @NonNull JoinArgs fromMap(@NonNull Map<String, Object> map) {
      JoinArgs pigeonResult = new JoinArgs();
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      Object token = map.get("token");
      pigeonResult.setToken((String)token);
      Object enableMicrophone = map.get("enableMicrophone");
      pigeonResult.setEnableMicrophone((Boolean)enableMicrophone);
      Object enableCamera = map.get("enableCamera");
      pigeonResult.setEnableCamera((Boolean)enableCamera);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UpdateSubscriptionProfileArgs {
    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull Boolean subscribeCamera;
    public @NonNull Boolean getSubscribeCamera() { return subscribeCamera; }
    public void setSubscribeCamera(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"subscribeCamera\" is null.");
      }
      this.subscribeCamera = setterArg;
    }

    private @NonNull Boolean subscribeMicrophone;
    public @NonNull Boolean getSubscribeMicrophone() { return subscribeMicrophone; }
    public void setSubscribeMicrophone(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"subscribeMicrophone\" is null.");
      }
      this.subscribeMicrophone = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private UpdateSubscriptionProfileArgs() {}
    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable Boolean subscribeCamera;
      public @NonNull Builder setSubscribeCamera(@NonNull Boolean setterArg) {
        this.subscribeCamera = setterArg;
        return this;
      }
      private @Nullable Boolean subscribeMicrophone;
      public @NonNull Builder setSubscribeMicrophone(@NonNull Boolean setterArg) {
        this.subscribeMicrophone = setterArg;
        return this;
      }
      public @NonNull UpdateSubscriptionProfileArgs build() {
        UpdateSubscriptionProfileArgs pigeonReturn = new UpdateSubscriptionProfileArgs();
        pigeonReturn.setName(name);
        pigeonReturn.setSubscribeCamera(subscribeCamera);
        pigeonReturn.setSubscribeMicrophone(subscribeMicrophone);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("subscribeCamera", subscribeCamera);
      toMapResult.put("subscribeMicrophone", subscribeMicrophone);
      return toMapResult;
    }
    static @NonNull UpdateSubscriptionProfileArgs fromMap(@NonNull Map<String, Object> map) {
      UpdateSubscriptionProfileArgs pigeonResult = new UpdateSubscriptionProfileArgs();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object subscribeCamera = map.get("subscribeCamera");
      pigeonResult.setSubscribeCamera((Boolean)subscribeCamera);
      Object subscribeMicrophone = map.get("subscribeMicrophone");
      pigeonResult.setSubscribeMicrophone((Boolean)subscribeMicrophone);
      return pigeonResult;
    }
  }

  /**
   * Returning class from join() function
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static class JoinMessage {
    private @Nullable LocalParticipantMessage localParticipant;
    public @Nullable LocalParticipantMessage getLocalParticipant() { return localParticipant; }
    public void setLocalParticipant(@Nullable LocalParticipantMessage setterArg) {
      this.localParticipant = setterArg;
    }

    private @Nullable List<RemoteParticipantMessage> remoteParticipants;
    public @Nullable List<RemoteParticipantMessage> getRemoteParticipants() { return remoteParticipants; }
    public void setRemoteParticipants(@Nullable List<RemoteParticipantMessage> setterArg) {
      this.remoteParticipants = setterArg;
    }

    private @Nullable PlatformError error;
    public @Nullable PlatformError getError() { return error; }
    public void setError(@Nullable PlatformError setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {
      private @Nullable LocalParticipantMessage localParticipant;
      public @NonNull Builder setLocalParticipant(@Nullable LocalParticipantMessage setterArg) {
        this.localParticipant = setterArg;
        return this;
      }
      private @Nullable List<RemoteParticipantMessage> remoteParticipants;
      public @NonNull Builder setRemoteParticipants(@Nullable List<RemoteParticipantMessage> setterArg) {
        this.remoteParticipants = setterArg;
        return this;
      }
      private @Nullable PlatformError error;
      public @NonNull Builder setError(@Nullable PlatformError setterArg) {
        this.error = setterArg;
        return this;
      }
      public @NonNull JoinMessage build() {
        JoinMessage pigeonReturn = new JoinMessage();
        pigeonReturn.setLocalParticipant(localParticipant);
        pigeonReturn.setRemoteParticipants(remoteParticipants);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("localParticipant", (localParticipant == null) ? null : localParticipant.toMap());
      toMapResult.put("remoteParticipants", remoteParticipants);
      toMapResult.put("error", (error == null) ? null : error.toMap());
      return toMapResult;
    }
    static @NonNull JoinMessage fromMap(@NonNull Map<String, Object> map) {
      JoinMessage pigeonResult = new JoinMessage();
      Object localParticipant = map.get("localParticipant");
      pigeonResult.setLocalParticipant((localParticipant == null) ? null : LocalParticipantMessage.fromMap((Map)localParticipant));
      Object remoteParticipants = map.get("remoteParticipants");
      pigeonResult.setRemoteParticipants((List<RemoteParticipantMessage>)remoteParticipants);
      Object error = map.get("error");
      pigeonResult.setError((error == null) ? null : PlatformError.fromMap((Map)error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocalParticipantMessage {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String userId;
    public @NonNull String getUserId() { return userId; }
    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @Nullable MediaMessage media;
    public @Nullable MediaMessage getMedia() { return media; }
    public void setMedia(@Nullable MediaMessage setterArg) {
      this.media = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private LocalParticipantMessage() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String userId;
      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }
      private @Nullable MediaMessage media;
      public @NonNull Builder setMedia(@Nullable MediaMessage setterArg) {
        this.media = setterArg;
        return this;
      }
      public @NonNull LocalParticipantMessage build() {
        LocalParticipantMessage pigeonReturn = new LocalParticipantMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setUserId(userId);
        pigeonReturn.setMedia(media);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("userId", userId);
      toMapResult.put("media", (media == null) ? null : media.toMap());
      return toMapResult;
    }
    static @NonNull LocalParticipantMessage fromMap(@NonNull Map<String, Object> map) {
      LocalParticipantMessage pigeonResult = new LocalParticipantMessage();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object userId = map.get("userId");
      pigeonResult.setUserId((String)userId);
      Object media = map.get("media");
      pigeonResult.setMedia((media == null) ? null : MediaMessage.fromMap((Map)media));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RemoteParticipantMessage {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String userId;
    public @NonNull String getUserId() { return userId; }
    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @NonNull String userName;
    public @NonNull String getUserName() { return userName; }
    public void setUserName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userName\" is null.");
      }
      this.userName = setterArg;
    }

    private @Nullable MediaMessage media;
    public @Nullable MediaMessage getMedia() { return media; }
    public void setMedia(@Nullable MediaMessage setterArg) {
      this.media = setterArg;
    }

    private @NonNull String joinedAtIsoString;
    public @NonNull String getJoinedAtIsoString() { return joinedAtIsoString; }
    public void setJoinedAtIsoString(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"joinedAtIsoString\" is null.");
      }
      this.joinedAtIsoString = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private RemoteParticipantMessage() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String userId;
      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }
      private @Nullable String userName;
      public @NonNull Builder setUserName(@NonNull String setterArg) {
        this.userName = setterArg;
        return this;
      }
      private @Nullable MediaMessage media;
      public @NonNull Builder setMedia(@Nullable MediaMessage setterArg) {
        this.media = setterArg;
        return this;
      }
      private @Nullable String joinedAtIsoString;
      public @NonNull Builder setJoinedAtIsoString(@NonNull String setterArg) {
        this.joinedAtIsoString = setterArg;
        return this;
      }
      public @NonNull RemoteParticipantMessage build() {
        RemoteParticipantMessage pigeonReturn = new RemoteParticipantMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setUserId(userId);
        pigeonReturn.setUserName(userName);
        pigeonReturn.setMedia(media);
        pigeonReturn.setJoinedAtIsoString(joinedAtIsoString);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("userId", userId);
      toMapResult.put("userName", userName);
      toMapResult.put("media", (media == null) ? null : media.toMap());
      toMapResult.put("joinedAtIsoString", joinedAtIsoString);
      return toMapResult;
    }
    static @NonNull RemoteParticipantMessage fromMap(@NonNull Map<String, Object> map) {
      RemoteParticipantMessage pigeonResult = new RemoteParticipantMessage();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object userId = map.get("userId");
      pigeonResult.setUserId((String)userId);
      Object userName = map.get("userName");
      pigeonResult.setUserName((String)userName);
      Object media = map.get("media");
      pigeonResult.setMedia((media == null) ? null : MediaMessage.fromMap((Map)media));
      Object joinedAtIsoString = map.get("joinedAtIsoString");
      pigeonResult.setJoinedAtIsoString((String)joinedAtIsoString);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ParticipantsMessage {
    private @NonNull LocalParticipantMessage local;
    public @NonNull LocalParticipantMessage getLocal() { return local; }
    public void setLocal(@NonNull LocalParticipantMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"local\" is null.");
      }
      this.local = setterArg;
    }

    private @NonNull List<RemoteParticipantMessage> remote;
    public @NonNull List<RemoteParticipantMessage> getRemote() { return remote; }
    public void setRemote(@NonNull List<RemoteParticipantMessage> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"remote\" is null.");
      }
      this.remote = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private ParticipantsMessage() {}
    public static final class Builder {
      private @Nullable LocalParticipantMessage local;
      public @NonNull Builder setLocal(@NonNull LocalParticipantMessage setterArg) {
        this.local = setterArg;
        return this;
      }
      private @Nullable List<RemoteParticipantMessage> remote;
      public @NonNull Builder setRemote(@NonNull List<RemoteParticipantMessage> setterArg) {
        this.remote = setterArg;
        return this;
      }
      public @NonNull ParticipantsMessage build() {
        ParticipantsMessage pigeonReturn = new ParticipantsMessage();
        pigeonReturn.setLocal(local);
        pigeonReturn.setRemote(remote);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("local", (local == null) ? null : local.toMap());
      toMapResult.put("remote", remote);
      return toMapResult;
    }
    static @NonNull ParticipantsMessage fromMap(@NonNull Map<String, Object> map) {
      ParticipantsMessage pigeonResult = new ParticipantsMessage();
      Object local = map.get("local");
      pigeonResult.setLocal((local == null) ? null : LocalParticipantMessage.fromMap((Map)local));
      Object remote = map.get("remote");
      pigeonResult.setRemote((List<RemoteParticipantMessage>)remote);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaMessage {
    private @NonNull MediaInfoMessage camera;
    public @NonNull MediaInfoMessage getCamera() { return camera; }
    public void setCamera(@NonNull MediaInfoMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"camera\" is null.");
      }
      this.camera = setterArg;
    }

    private @NonNull MediaInfoMessage microphone;
    public @NonNull MediaInfoMessage getMicrophone() { return microphone; }
    public void setMicrophone(@NonNull MediaInfoMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"microphone\" is null.");
      }
      this.microphone = setterArg;
    }

    private @NonNull MediaInfoMessage screenVideo;
    public @NonNull MediaInfoMessage getScreenVideo() { return screenVideo; }
    public void setScreenVideo(@NonNull MediaInfoMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenVideo\" is null.");
      }
      this.screenVideo = setterArg;
    }

    private @NonNull MediaInfoMessage screenAudio;
    public @NonNull MediaInfoMessage getScreenAudio() { return screenAudio; }
    public void setScreenAudio(@NonNull MediaInfoMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenAudio\" is null.");
      }
      this.screenAudio = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private MediaMessage() {}
    public static final class Builder {
      private @Nullable MediaInfoMessage camera;
      public @NonNull Builder setCamera(@NonNull MediaInfoMessage setterArg) {
        this.camera = setterArg;
        return this;
      }
      private @Nullable MediaInfoMessage microphone;
      public @NonNull Builder setMicrophone(@NonNull MediaInfoMessage setterArg) {
        this.microphone = setterArg;
        return this;
      }
      private @Nullable MediaInfoMessage screenVideo;
      public @NonNull Builder setScreenVideo(@NonNull MediaInfoMessage setterArg) {
        this.screenVideo = setterArg;
        return this;
      }
      private @Nullable MediaInfoMessage screenAudio;
      public @NonNull Builder setScreenAudio(@NonNull MediaInfoMessage setterArg) {
        this.screenAudio = setterArg;
        return this;
      }
      public @NonNull MediaMessage build() {
        MediaMessage pigeonReturn = new MediaMessage();
        pigeonReturn.setCamera(camera);
        pigeonReturn.setMicrophone(microphone);
        pigeonReturn.setScreenVideo(screenVideo);
        pigeonReturn.setScreenAudio(screenAudio);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("camera", (camera == null) ? null : camera.toMap());
      toMapResult.put("microphone", (microphone == null) ? null : microphone.toMap());
      toMapResult.put("screenVideo", (screenVideo == null) ? null : screenVideo.toMap());
      toMapResult.put("screenAudio", (screenAudio == null) ? null : screenAudio.toMap());
      return toMapResult;
    }
    static @NonNull MediaMessage fromMap(@NonNull Map<String, Object> map) {
      MediaMessage pigeonResult = new MediaMessage();
      Object camera = map.get("camera");
      pigeonResult.setCamera((camera == null) ? null : MediaInfoMessage.fromMap((Map)camera));
      Object microphone = map.get("microphone");
      pigeonResult.setMicrophone((microphone == null) ? null : MediaInfoMessage.fromMap((Map)microphone));
      Object screenVideo = map.get("screenVideo");
      pigeonResult.setScreenVideo((screenVideo == null) ? null : MediaInfoMessage.fromMap((Map)screenVideo));
      Object screenAudio = map.get("screenAudio");
      pigeonResult.setScreenAudio((screenAudio == null) ? null : MediaInfoMessage.fromMap((Map)screenAudio));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MediaInfoMessage {
    private @NonNull MediaStateMessage state;
    public @NonNull MediaStateMessage getState() { return state; }
    public void setState(@NonNull MediaStateMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    private @NonNull TrackSubscriptionStateMessage subscribed;
    public @NonNull TrackSubscriptionStateMessage getSubscribed() { return subscribed; }
    public void setSubscribed(@NonNull TrackSubscriptionStateMessage setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"subscribed\" is null.");
      }
      this.subscribed = setterArg;
    }

    private @Nullable TrackMessage track;
    public @Nullable TrackMessage getTrack() { return track; }
    public void setTrack(@Nullable TrackMessage setterArg) {
      this.track = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private MediaInfoMessage() {}
    public static final class Builder {
      private @Nullable MediaStateMessage state;
      public @NonNull Builder setState(@NonNull MediaStateMessage setterArg) {
        this.state = setterArg;
        return this;
      }
      private @Nullable TrackSubscriptionStateMessage subscribed;
      public @NonNull Builder setSubscribed(@NonNull TrackSubscriptionStateMessage setterArg) {
        this.subscribed = setterArg;
        return this;
      }
      private @Nullable TrackMessage track;
      public @NonNull Builder setTrack(@Nullable TrackMessage setterArg) {
        this.track = setterArg;
        return this;
      }
      public @NonNull MediaInfoMessage build() {
        MediaInfoMessage pigeonReturn = new MediaInfoMessage();
        pigeonReturn.setState(state);
        pigeonReturn.setSubscribed(subscribed);
        pigeonReturn.setTrack(track);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("state", state == null ? null : state.index);
      toMapResult.put("subscribed", subscribed == null ? null : subscribed.index);
      toMapResult.put("track", (track == null) ? null : track.toMap());
      return toMapResult;
    }
    static @NonNull MediaInfoMessage fromMap(@NonNull Map<String, Object> map) {
      MediaInfoMessage pigeonResult = new MediaInfoMessage();
      Object state = map.get("state");
      pigeonResult.setState(state == null ? null : MediaStateMessage.values()[(int)state]);
      Object subscribed = map.get("subscribed");
      pigeonResult.setSubscribed(subscribed == null ? null : TrackSubscriptionStateMessage.values()[(int)subscribed]);
      Object track = map.get("track");
      pigeonResult.setTrack((track == null) ? null : TrackMessage.fromMap((Map)track));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackMessage {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull Boolean isEnabled;
    public @NonNull Boolean getIsEnabled() { return isEnabled; }
    public void setIsEnabled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isEnabled\" is null.");
      }
      this.isEnabled = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private TrackMessage() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable Boolean isEnabled;
      public @NonNull Builder setIsEnabled(@NonNull Boolean setterArg) {
        this.isEnabled = setterArg;
        return this;
      }
      public @NonNull TrackMessage build() {
        TrackMessage pigeonReturn = new TrackMessage();
        pigeonReturn.setId(id);
        pigeonReturn.setIsEnabled(isEnabled);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("isEnabled", isEnabled);
      return toMapResult;
    }
    static @NonNull TrackMessage fromMap(@NonNull Map<String, Object> map) {
      TrackMessage pigeonResult = new TrackMessage();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object isEnabled = map.get("isEnabled");
      pigeonResult.setIsEnabled((Boolean)isEnabled);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class DailyMessengerCodec extends StandardMessageCodec {
    public static final DailyMessengerCodec INSTANCE = new DailyMessengerCodec();
    private DailyMessengerCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return JoinArgs.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return JoinMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return LocalParticipantMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return LocalParticipantMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MediaInfoMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MediaMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ParticipantsMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return PlatformError.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return RemoteParticipantMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return TrackMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return UpdateSubscriptionArgs.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return UpdateSubscriptionProfileArgs.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return VoidResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof JoinArgs) {
        stream.write(128);
        writeValue(stream, ((JoinArgs) value).toMap());
      } else 
      if (value instanceof JoinMessage) {
        stream.write(129);
        writeValue(stream, ((JoinMessage) value).toMap());
      } else 
      if (value instanceof LocalParticipantMessage) {
        stream.write(130);
        writeValue(stream, ((LocalParticipantMessage) value).toMap());
      } else 
      if (value instanceof LocalParticipantMessage) {
        stream.write(131);
        writeValue(stream, ((LocalParticipantMessage) value).toMap());
      } else 
      if (value instanceof MediaInfoMessage) {
        stream.write(132);
        writeValue(stream, ((MediaInfoMessage) value).toMap());
      } else 
      if (value instanceof MediaMessage) {
        stream.write(133);
        writeValue(stream, ((MediaMessage) value).toMap());
      } else 
      if (value instanceof ParticipantsMessage) {
        stream.write(134);
        writeValue(stream, ((ParticipantsMessage) value).toMap());
      } else 
      if (value instanceof PlatformError) {
        stream.write(135);
        writeValue(stream, ((PlatformError) value).toMap());
      } else 
      if (value instanceof RemoteParticipantMessage) {
        stream.write(136);
        writeValue(stream, ((RemoteParticipantMessage) value).toMap());
      } else 
      if (value instanceof TrackMessage) {
        stream.write(137);
        writeValue(stream, ((TrackMessage) value).toMap());
      } else 
      if (value instanceof UpdateSubscriptionArgs) {
        stream.write(138);
        writeValue(stream, ((UpdateSubscriptionArgs) value).toMap());
      } else 
      if (value instanceof UpdateSubscriptionProfileArgs) {
        stream.write(139);
        writeValue(stream, ((UpdateSubscriptionProfileArgs) value).toMap());
      } else 
      if (value instanceof VoidResult) {
        stream.write(140);
        writeValue(stream, ((VoidResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * This is the base class of communication with native code.
   * It's used for generating the Pigeon files
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface DailyMessenger {
    /** Join Daily call. */
    void join(@NonNull JoinArgs args, Result<JoinMessage> result);
    /** Leave Daily call. */
    @NonNull VoidResult leave();
    @NonNull VoidResult setMicrophoneEnabled(@NonNull Boolean enableMic);
    @NonNull VoidResult setCameraEnabled(@NonNull Boolean enableCam);
    @NonNull VoidResult updateSubscriptionProfiles(@NonNull List<UpdateSubscriptionProfileArgs> args);
    @NonNull VoidResult updateSubscriptions(@NonNull List<UpdateSubscriptionArgs> args);
    @NonNull ParticipantsMessage getParticipants();

    /** The codec used by DailyMessenger. */
    static MessageCodec<Object> getCodec() {
      return       DailyMessengerCodec.INSTANCE;    }
    /**Sets up an instance of `DailyMessenger` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DailyMessenger api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.join", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              JoinArgs argsArg = (JoinArgs)args.get(0);
              if (argsArg == null) {
                throw new NullPointerException("argsArg unexpectedly null.");
              }
              Result<JoinMessage> resultCallback = new Result<JoinMessage>() {
                public void success(JoinMessage result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.join(argsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.leave", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              VoidResult output = api.leave();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.setMicrophoneEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enableMicArg = (Boolean)args.get(0);
              if (enableMicArg == null) {
                throw new NullPointerException("enableMicArg unexpectedly null.");
              }
              VoidResult output = api.setMicrophoneEnabled(enableMicArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.setCameraEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enableCamArg = (Boolean)args.get(0);
              if (enableCamArg == null) {
                throw new NullPointerException("enableCamArg unexpectedly null.");
              }
              VoidResult output = api.setCameraEnabled(enableCamArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.updateSubscriptionProfiles", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              List<UpdateSubscriptionProfileArgs> argsArg = (List<UpdateSubscriptionProfileArgs>)args.get(0);
              if (argsArg == null) {
                throw new NullPointerException("argsArg unexpectedly null.");
              }
              VoidResult output = api.updateSubscriptionProfiles(argsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.updateSubscriptions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              List<UpdateSubscriptionArgs> argsArg = (List<UpdateSubscriptionArgs>)args.get(0);
              if (argsArg == null) {
                throw new NullPointerException("argsArg unexpectedly null.");
              }
              VoidResult output = api.updateSubscriptions(argsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyMessenger.getParticipants", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ParticipantsMessage output = api.getParticipants();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class DailyCallbackCodec extends StandardMessageCodec {
    public static final DailyCallbackCodec INSTANCE = new DailyCallbackCodec();
    private DailyCallbackCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LocalParticipantMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return MediaInfoMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return MediaMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return RemoteParticipantMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return RemoteParticipantMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return TrackMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LocalParticipantMessage) {
        stream.write(128);
        writeValue(stream, ((LocalParticipantMessage) value).toMap());
      } else 
      if (value instanceof MediaInfoMessage) {
        stream.write(129);
        writeValue(stream, ((MediaInfoMessage) value).toMap());
      } else 
      if (value instanceof MediaMessage) {
        stream.write(130);
        writeValue(stream, ((MediaMessage) value).toMap());
      } else 
      if (value instanceof RemoteParticipantMessage) {
        stream.write(131);
        writeValue(stream, ((RemoteParticipantMessage) value).toMap());
      } else 
      if (value instanceof RemoteParticipantMessage) {
        stream.write(132);
        writeValue(stream, ((RemoteParticipantMessage) value).toMap());
      } else 
      if (value instanceof TrackMessage) {
        stream.write(133);
        writeValue(stream, ((TrackMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class DailyCallback {
    private final BinaryMessenger binaryMessenger;
    public DailyCallback(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by DailyCallback. */
    static MessageCodec<Object> getCodec() {
      return       DailyCallbackCodec.INSTANCE;
    }
    public void onParticipantUpdated(@NonNull RemoteParticipantMessage remoteParticipantMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyCallback.onParticipantUpdated", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(remoteParticipantMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onLocalParticipantUpdated(@NonNull LocalParticipantMessage localParticipantMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyCallback.onLocalParticipantUpdated", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(localParticipantMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onParticipantJoined(@NonNull RemoteParticipantMessage remoteParticipantMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyCallback.onParticipantJoined", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(remoteParticipantMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onParticipantLeft(@NonNull RemoteParticipantMessage remoteParticipantMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyCallback.onParticipantLeft", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(remoteParticipantMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void activeSpeakerChanged(@Nullable RemoteParticipantMessage remoteParticipantMessageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyCallback.activeSpeakerChanged", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(remoteParticipantMessageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onCallStateUpdated(@NonNull Long stateCodeArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DailyCallback.onCallStateUpdated", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(stateCodeArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
